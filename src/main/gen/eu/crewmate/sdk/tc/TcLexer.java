// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: TC.flex

package eu.crewmate.sdk.tc;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import eu.crewmate.sdk.tc.psi.TcTypes;
import com.intellij.psi.TokenType;


class TcLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int WAITING_VALUE1 = 2;
  public static final int WAITING_VALUE2 = 4;
  public static final int WAITING_COMMAND = 6;
  public static final int OPTIONAL_VALUES = 8;
  public static final int PR_COMMAND = 10;
  public static final int VER_TYPE = 12;
  public static final int VER_OPT = 14;
  public static final int VER_VALUE = 16;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8, 8
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\4\u0200\1\u0300\1\u0400\1\u0200\5\u0500\1\u0600"+
    "\1\u0700\1\u0800\6\u0200\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00"+
    "\1\u0e00\4\u0200\1\u0f00\204\u0200\1\u0700\1\u0200\1\u1000\1\u1100"+
    "\1\u1200\1\u1300\123\u0200\1\u0a00\4\u0200\1\u1400\10\u0200\1\u1500"+
    "\2\u0200\1\u1600\1\u1700\1\u1300\1\u0200\1\u0600\1\u0200\1\u1800"+
    "\1\u1500\1\u0900\3\u0200\1\u1200\1\u1900\114\u0200\1\u1a00\1\u1200"+
    "\153\u0200\1\u1b00\11\u0200\1\u1c00\1\u1300\6\u0200\1\u1200\u0f16\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\1"+
    "\1\4\1\0\1\5\4\0\2\6\1\0\1\7\1\10"+
    "\1\11\1\10\1\0\12\12\1\0\1\13\3\0\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\0\1\25\1\0\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\0\1\34\1\35\1\36\1\37\1\40\5\0"+
    "\1\41\4\0\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\0\1\25\1\0\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\0\1\34\1\35\1\36\1\37\1\40"+
    "\5\0\1\6\263\0\2\25\115\0\1\35\u01e0\0\12\12"+
    "\206\0\12\12\306\0\12\12\234\0\12\12\166\0\12\12"+
    "\140\0\12\12\166\0\12\12\106\0\12\12\u0116\0\12\12"+
    "\106\0\12\12\u0146\0\12\12\46\0\12\12\u012c\0\12\12"+
    "\200\0\12\12\246\0\12\12\6\0\12\12\266\0\12\12"+
    "\126\0\12\12\206\0\12\12\6\0\12\12\320\0\1\26"+
    "\u01a5\0\12\12\46\0\12\12\306\0\12\12\26\0\12\12"+
    "\126\0\12\12\u0196\0\12\12\246\0\12\12\206\0\12\12"+
    "\u012c\0\12\12\200\0\12\12\74\0\12\12\220\0\12\12"+
    "\166\0\12\12\146\0\12\12\206\0\12\12\106\0\12\12"+
    "\266\0\12\12\u0164\0\62\12\100\0\12\12\266\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[7424];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\1\1\4\1\2\1\5"+
    "\7\1\1\6\1\7\1\2\1\10\1\11\1\12\1\13"+
    "\1\14\2\15\2\11\1\16\2\4\10\1\1\17\1\11"+
    "\1\15\1\11\10\1\1\11\1\15\1\20\3\1\1\21"+
    "\4\1\1\15\6\1\1\22\4\1\1\15\3\1\1\15"+
    "\2\1\1\15\1\23\1\1\1\15\1\1\1\15\1\1"+
    "\1\15\1\24\4\15\1\22";

  private static int [] zzUnpackAction() {
    int [] result = new int[103];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\42\0\104\0\146\0\210\0\252\0\314\0\356"+
    "\0\u0110\0\u0132\0\u0154\0\u0176\0\u0198\0\u01ba\0\u01dc\0\u0176"+
    "\0\u0176\0\u01fe\0\u0220\0\u0242\0\u0264\0\u0286\0\u02a8\0\u02ca"+
    "\0\u02ec\0\u030e\0\u0330\0\u0352\0\u0374\0\u0396\0\u03b8\0\u03da"+
    "\0\u03fc\0\u041e\0\u0440\0\u0462\0\u0484\0\u0176\0\u04a6\0\u04c8"+
    "\0\u04ea\0\u050c\0\u052e\0\u0550\0\u0572\0\u0594\0\u05b6\0\u0176"+
    "\0\u05d8\0\u05fa\0\u061c\0\u063e\0\u0660\0\u0682\0\u06a4\0\u06c6"+
    "\0\u06e8\0\u070a\0\u072c\0\u074e\0\u0770\0\u0440\0\u0792\0\u07b4"+
    "\0\u07d6\0\u0132\0\u07f8\0\u081a\0\u083c\0\u085e\0\u0880\0\u08a2"+
    "\0\u08c4\0\u08e6\0\u0908\0\u092a\0\u094c\0\u096e\0\u0990\0\u09b2"+
    "\0\u09d4\0\u09f6\0\u0a18\0\u0a3a\0\u0a5c\0\u0a7e\0\u0aa0\0\u0ac2"+
    "\0\u0ae4\0\u0b06\0\u0132\0\u0b28\0\u0b4a\0\u0b6c\0\u0b8e\0\u0bb0"+
    "\0\u0bd2\0\u0132\0\u0bf4\0\u0c16\0\u0c38\0\u0c5a\0\u03fc";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[103];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\12\1\13\1\14\1\15\1\16\1\17\5\12\1\20"+
    "\1\16\1\21\3\12\1\22\1\12\1\23\4\12\1\24"+
    "\2\12\1\25\1\12\1\26\1\27\1\12\1\30\1\12"+
    "\2\31\1\14\1\15\7\31\1\20\26\31\2\32\1\14"+
    "\1\15\7\32\1\33\26\32\2\34\1\14\1\15\7\34"+
    "\1\20\26\34\2\35\1\14\1\15\2\35\2\36\1\35"+
    "\2\36\1\20\1\36\24\35\1\37\2\40\1\14\1\15"+
    "\7\40\1\20\26\40\2\41\1\14\1\15\7\41\1\20"+
    "\11\41\1\42\14\41\2\43\1\14\1\15\7\43\1\20"+
    "\20\43\1\44\5\43\2\45\1\14\1\15\7\45\1\20"+
    "\26\45\2\12\2\0\7\12\1\0\26\12\1\0\1\13"+
    "\104\0\1\14\37\0\2\12\2\0\7\12\1\0\24\12"+
    "\1\30\1\12\2\17\1\46\1\47\36\17\2\12\2\0"+
    "\7\12\1\0\11\12\1\50\16\12\2\0\7\12\1\0"+
    "\20\12\1\51\2\12\1\52\4\12\2\0\7\12\1\0"+
    "\6\12\1\53\21\12\2\0\7\12\1\0\20\12\1\54"+
    "\7\12\2\0\7\12\1\0\22\12\1\55\5\12\2\0"+
    "\7\12\1\0\16\12\1\56\11\12\2\0\7\12\1\0"+
    "\6\12\1\57\17\12\2\31\2\0\7\31\1\0\26\31"+
    "\2\32\2\0\7\32\1\0\26\32\13\0\1\60\26\0"+
    "\2\34\2\0\7\34\1\0\26\34\2\35\2\0\7\35"+
    "\1\0\25\35\1\37\2\35\2\0\2\35\2\36\1\61"+
    "\2\36\1\0\1\36\24\35\3\37\2\0\7\37\1\0"+
    "\26\37\2\40\2\0\7\40\1\0\26\40\2\41\2\0"+
    "\7\41\1\0\30\41\2\0\7\41\1\0\14\41\1\62"+
    "\11\41\2\43\2\0\7\43\1\0\30\43\2\0\7\43"+
    "\1\0\23\43\1\63\2\43\2\45\2\0\7\45\1\0"+
    "\26\45\2\0\1\46\37\0\2\12\2\0\7\12\1\0"+
    "\2\12\1\64\25\12\2\0\7\12\1\0\2\12\1\65"+
    "\25\12\2\0\7\12\1\0\15\12\1\66\12\12\2\0"+
    "\7\12\1\0\15\12\1\67\12\12\2\0\7\12\1\0"+
    "\16\12\1\70\11\12\2\0\7\12\1\0\2\12\1\71"+
    "\25\12\2\0\7\12\1\0\16\12\1\72\11\12\2\0"+
    "\7\12\1\0\20\12\1\73\5\12\2\35\2\0\3\35"+
    "\1\74\1\35\1\74\1\36\1\0\25\35\1\37\2\41"+
    "\2\0\7\41\1\0\2\41\1\75\23\41\2\43\2\0"+
    "\7\43\1\0\15\43\1\76\10\43\2\12\2\0\7\12"+
    "\1\0\13\12\1\77\14\12\2\0\7\12\1\0\14\12"+
    "\1\100\13\12\2\0\7\12\1\0\4\12\1\101\23\12"+
    "\2\0\7\12\1\0\23\12\1\102\4\12\2\0\7\12"+
    "\1\0\4\12\1\103\23\12\2\0\7\12\1\0\22\12"+
    "\1\104\5\12\2\0\7\12\1\0\13\12\1\105\14\12"+
    "\2\0\7\12\1\0\11\12\1\106\14\12\2\35\2\0"+
    "\6\35\1\36\1\0\25\35\1\37\2\41\2\0\7\41"+
    "\1\0\10\41\1\107\15\41\2\12\2\0\7\12\1\0"+
    "\16\12\1\110\11\12\2\0\7\12\1\0\6\12\1\102"+
    "\21\12\2\0\7\12\1\0\22\12\1\111\5\12\2\0"+
    "\7\12\1\0\6\12\1\112\21\12\2\0\7\12\1\0"+
    "\23\12\1\113\4\12\2\0\7\12\1\0\3\12\1\114"+
    "\24\12\2\0\7\12\1\0\7\12\1\115\16\12\2\41"+
    "\2\0\7\41\1\0\6\41\1\116\17\41\2\12\2\0"+
    "\7\12\1\0\10\12\1\102\17\12\2\0\7\12\1\0"+
    "\11\12\1\117\16\12\2\0\7\12\1\0\5\12\1\120"+
    "\22\12\2\0\7\12\1\0\21\12\1\105\6\12\2\0"+
    "\7\12\1\0\2\12\1\121\25\12\2\0\7\12\1\0"+
    "\11\12\1\122\14\12\2\41\2\0\5\41\1\123\1\41"+
    "\1\0\26\41\2\12\2\0\7\12\1\0\16\12\1\124"+
    "\11\12\2\0\7\12\1\0\23\12\1\125\4\12\2\0"+
    "\7\12\1\0\20\12\1\102\7\12\2\0\7\12\1\0"+
    "\4\12\1\126\21\12\2\41\2\0\7\41\1\0\13\41"+
    "\1\127\12\41\2\12\2\0\7\12\1\0\15\12\1\102"+
    "\12\12\2\0\7\12\1\0\20\12\1\130\7\12\2\0"+
    "\7\12\1\0\2\12\1\131\23\12\2\41\2\0\7\41"+
    "\1\0\16\41\1\132\7\41\2\12\2\0\7\12\1\0"+
    "\6\12\1\133\21\12\2\0\7\12\1\0\22\12\1\134"+
    "\3\12\2\41\2\0\7\41\1\0\16\41\1\135\7\41"+
    "\2\12\2\0\7\12\1\0\11\12\1\136\14\12\2\41"+
    "\2\0\7\41\1\0\12\41\1\137\13\41\2\12\2\0"+
    "\7\12\1\0\16\12\1\140\7\12\2\41\2\0\7\41"+
    "\1\0\21\41\1\141\4\41\2\12\2\0\7\12\1\0"+
    "\15\12\1\142\10\12\2\41\2\0\5\41\1\143\1\41"+
    "\1\0\30\41\2\0\7\41\1\0\21\41\1\144\6\41"+
    "\2\0\7\41\1\0\2\41\1\145\25\41\2\0\7\41"+
    "\1\0\14\41\1\146\13\41\2\0\7\41\1\0\6\41"+
    "\1\147\17\41";

  private static int [] zzUnpacktrans() {
    int [] result = new int[3196];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\11\0\2\1\1\11\3\1\2\11\24\1\1\11\11\1"+
    "\1\11\67\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[103];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  TcLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return TcTypes.PYTHON;
            }
          // fall through
          case 21: break;
          case 2:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 22: break;
          case 3:
            { yybegin(YYINITIAL); return TcTypes.EOL;
            }
          // fall through
          case 23: break;
          case 4:
            { return TcTypes.COMMENT;
            }
          // fall through
          case 24: break;
          case 5:
            { return TcTypes.PAUSE;
            }
          // fall through
          case 25: break;
          case 6:
            { yybegin(WAITING_VALUE2);  return TcTypes.ELEMENT_KEY;
            }
          // fall through
          case 26: break;
          case 7:
            { yybegin(WAITING_COMMAND); return TcTypes.ELEMENT_KEY;
            }
          // fall through
          case 27: break;
          case 8:
            { yybegin(OPTIONAL_VALUES); return TcTypes.VALUE;
            }
          // fall through
          case 28: break;
          case 9:
            { return TcTypes.STR_OPTION;
            }
          // fall through
          case 29: break;
          case 10:
            { return TcTypes.INT_OPTION;
            }
          // fall through
          case 30: break;
          case 11:
            { return TcTypes.PATH_OPTION;
            }
          // fall through
          case 31: break;
          case 12:
            { yybegin(OPTIONAL_VALUES); return TcTypes.PR_NAME;
            }
          // fall through
          case 32: break;
          case 13:
            { yybegin(OPTIONAL_VALUES); return TcTypes.VER_TYPE;
            }
          // fall through
          case 33: break;
          case 14:
            { yybegin(OPTIONAL_VALUES); return TcTypes.IMAGE_NAME;
            }
          // fall through
          case 34: break;
          case 15:
            { yybegin(WAITING_COMMAND); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 35: break;
          case 16:
            { yybegin(VER_VALUE); return TcTypes.STR_OPTION;
            }
          // fall through
          case 36: break;
          case 17:
            { yybegin(WAITING_VALUE1); return TcTypes.ELEMENT_TYPE;
            }
          // fall through
          case 37: break;
          case 18:
            { yybegin(VER_OPT); return TcTypes.VER_TYPE;
            }
          // fall through
          case 38: break;
          case 19:
            { yybegin(PR_COMMAND); return TcTypes.PROCEDURE;
            }
          // fall through
          case 39: break;
          case 20:
            { yybegin(VER_TYPE); return TcTypes.VERIFICATION;
            }
          // fall through
          case 40: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
